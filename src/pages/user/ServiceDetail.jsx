import React, { useState } from 'react'
import { useParams, Link } from 'react-router-dom'
import { jwtDecode } from "jwt-decode";
import { bookingService } from '../../services/booking.service'; // Import bookingService

const ServiceDetail = () => {
  const { id } = useParams();
  const [showBookingForm, setShowBookingForm] = useState(false);
  
  const getUserInfo = () => {
    const token = localStorage.getItem('token');
    if (!token) return null;
  
    try {
      const decoded = jwtDecode(token);
      return decoded.accountId || null;
    } catch (error) {
      console.error('L·ªói gi·∫£i m√£ token:', error);
      return null;
    }
  };

  // D·ªØ li·ªáu th√†nh ph·ªë v√† qu·∫≠n/huy·ªán Vi·ªát Nam
  const vietnamCities = [
    {
      name: "H√† N·ªôi",
      districts: ["Ba ƒê√¨nh", "Ho√†n Ki·∫øm", "T√¢y H·ªì", "Long Bi√™n", "C·∫ßu Gi·∫•y", "ƒê·ªëng ƒêa", "Hai B√† Tr∆∞ng", "Ho√†ng Mai", "Thanh Xu√¢n", "S√≥c S∆°n", "ƒê√¥ng Anh", "Gia L√¢m", "Nam T·ª´ Li√™m", "B·∫Øc T·ª´ Li√™m", "M√™ Linh", "H√† ƒê√¥ng", "S∆°n T√¢y", "Ba V√¨", "Ph√∫c Th·ªç", "ƒêan Ph∆∞·ª£ng", "Ho√†i ƒê·ª©c", "Qu·ªëc Oai", "Th·∫°ch Th·∫•t", "Ch∆∞∆°ng M·ªπ", "Thanh Oai", "Th∆∞·ªùng T√≠n", "Ph√∫ Xuy√™n", "·ª®ng H√≤a", "M·ªπ ƒê·ª©c"]
    },
    {
      name: "TP. H·ªì Ch√≠ Minh",
      districts: ["Qu·∫≠n 1", "Qu·∫≠n 2", "Qu·∫≠n 3", "Qu·∫≠n 4", "Qu·∫≠n 5", "Qu·∫≠n 6", "Qu·∫≠n 7", "Qu·∫≠n 8", "Qu·∫≠n 9", "Qu·∫≠n 10", "Qu·∫≠n 11", "Qu·∫≠n 12", "Th·ªß ƒê·ª©c", "G√≤ V·∫•p", "B√¨nh Th·∫°nh", "T√¢n B√¨nh", "T√¢n Ph√∫", "Ph√∫ Nhu·∫≠n", "B√¨nh T√¢n", "H√≥c M√¥n", "C·ªß Chi", "B√¨nh Ch√°nh", "Nh√† B√®", "C·∫ßn Gi·ªù"]
    },
    {
      name: "ƒê√† N·∫µng",
      districts: ["H·∫£i Ch√¢u", "Thanh Kh√™", "S∆°n Tr√†", "Ng≈© H√†nh S∆°n", "Li√™n Chi·ªÉu", "C·∫©m L·ªá", "H√≤a Vang", "Ho√†ng Sa"]
    },
    {
      name: "H·∫£i Ph√≤ng",
      districts: ["H·ªìng B√†ng", "Ng√¥ Quy·ªÅn", "L√™ Ch√¢n", "H·∫£i An", "Ki·∫øn An", "ƒê·ªì S∆°n", "D∆∞∆°ng Kinh", "Thu·ª∑ Nguy√™n", "An D∆∞∆°ng", "An L√£o", "Ki·∫øn Thu·ªµ", "Ti√™n L√£ng", "Vƒ©nh B·∫£o", "C√°t H·∫£i", "B·∫°ch Long Vƒ©"]
    },
    {
      name: "C·∫ßn Th∆°",
      districts: ["Ninh Ki·ªÅu", "√î M√¥n", "B√¨nh Thu·ª∑", "C√°i RƒÉng", "Th·ªët N·ªët", "Vƒ©nh Th·∫°nh", "C·ªù ƒê·ªè", "Phong ƒêi·ªÅn", "Th·ªõi Lai"]
    }
  ];

  // D·ªØ li·ªáu m·∫´u cho d·ªãch v·ª• t∆∞ v·∫•n theo gi·ªù
  const service = {
    id: 7,
    title: "T∆∞ v·∫•n t√¢m l√Ω theo gi·ªù",
    price: 100000,
    duration: 60, // ph√∫t
    description: "D·ªãch v·ª• t∆∞ v·∫•n t√¢m l√Ω tr·ª±c ti·∫øp 1-1 v·ªõi chuy√™n gia t√¢m l√Ω h√†ng ƒë·∫ßu. Gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ t√¢m l√Ω, t√¨nh c·∫£m v·ªõi chi ph√≠ h·ª£p l√Ω v√† linh ho·∫°t theo th·ªùi gian.",
    longDescription: "D·ªãch v·ª• t∆∞ v·∫•n t√¢m l√Ω theo gi·ªù c·ªßa Love Haven cung c·∫•p gi·∫£i ph√°p t∆∞ v·∫•n linh ho·∫°t, ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch c·ªßa b·∫°n. V·ªõi m·ª©c gi√° ch·ªâ 100.000 ƒë·ªìng/gi·ªù, b·∫°n s·∫Ω ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp 1-1 v·ªõi c√°c chuy√™n gia t√¢m l√Ω c√≥ tr√¨nh ƒë·ªô chuy√™n m√¥n cao v√† nhi·ªÅu nƒÉm kinh nghi·ªám. Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn kh√¥ng gian ri√™ng t∆∞, an to√†n ƒë·ªÉ b·∫°n c√≥ th·ªÉ chia s·∫ª m·ªçi v·∫•n ƒë·ªÅ v√† nh·∫≠n ƒë∆∞·ª£c l·ªùi khuy√™n, h∆∞·ªõng d·∫´n ph√π h·ª£p.",
    icon: "üí¨",
    features: [
      "T∆∞ v·∫•n 1-1 v·ªõi chuy√™n gia", 
      "Ch·ªâ 100.000ƒë/gi·ªù", 
      "Linh ho·∫°t th·ªùi gian", 
      "B·∫£o m·∫≠t th√¥ng tin",
      "Kh√¥ng gian ri√™ng t∆∞",
      "ƒê·∫∑t l·ªãch tr·ª±c tuy·∫øn"
    ],
    benefits: [
      {
        title: "Ti·∫øt ki·ªám chi ph√≠",
        description: "Chi ph√≠ h·ª£p l√Ω ch·ªâ 100.000ƒë/gi·ªù, ph√π h·ª£p v·ªõi m·ªçi ƒë·ªëi t∆∞·ª£ng"
      },
      {
        title: "Linh ho·∫°t th·ªùi gian",
        description: "ƒê·∫∑t l·ªãch theo th·ªùi gian ph√π h·ª£p v·ªõi b·∫°n, k·ªÉ c·∫£ bu·ªïi t·ªëi v√† cu·ªëi tu·∫ßn"
      },
      {
        title: "Chuy√™n gia h√†ng ƒë·∫ßu",
        description: "ƒê·ªôi ng≈© chuy√™n gia t√¢m l√Ω ƒë∆∞·ª£c ƒë√†o t·∫°o b√†i b·∫£n, c√≥ ch·ª©ng ch·ªâ h√†nh ngh·ªÅ"
      },
      {
        title: "B·∫£o m·∫≠t tuy·ªát ƒë·ªëi",
        description: "Th√¥ng tin c√° nh√¢n v√† n·ªôi dung t∆∞ v·∫•n ƒë∆∞·ª£c b·∫£o m·∫≠t 100%"
      }
    ],
    process: [
      {
        step: 1,
        title: "ƒêƒÉng k√Ω t∆∞ v·∫•n",
        description: "ƒêi·ªÅn th√¥ng tin v√† ch·ªçn th·ªùi gian ph√π h·ª£p"
      },
      {
        step: 2,
        title: "X√°c nh·∫≠n l·ªãch h·∫πn",
        description: "Nh·∫≠n email x√°c nh·∫≠n v√† h∆∞·ªõng d·∫´n chu·∫©n b·ªã"
      },
      {
        step: 3,
        title: "Tham gia bu·ªïi t∆∞ v·∫•n",
        description: "G·∫∑p g·ª° chuy√™n gia t·∫°i ƒë·ªãa ƒëi·ªÉm ƒë√£ ch·ªçn ho·∫∑c tr·ª±c tuy·∫øn"
      },
      {
        step: 4,
        title: "Nh·∫≠n k·∫øt qu·∫£ t∆∞ v·∫•n",
        description: "Nh·∫≠n b√°o c√°o v√† k·∫ø ho·∫°ch h√†nh ƒë·ªông sau bu·ªïi t∆∞ v·∫•n"
      }
    ],
    faqs: [
      {
        question: "T√¥i c√≥ th·ªÉ h·ªßy ho·∫∑c ƒë·ªïi l·ªãch h·∫πn kh√¥ng?",
        answer: "B·∫°n c√≥ th·ªÉ h·ªßy ho·∫∑c ƒë·ªïi l·ªãch h·∫πn tr∆∞·ªõc 24 gi·ªù m√† kh√¥ng m·∫•t ph√≠. N·∫øu h·ªßy trong v√≤ng 24 gi·ªù, b·∫°n s·∫Ω b·ªã t√≠nh 50% ph√≠ d·ªãch v·ª•."
      },
      {
        question: "L√†m th·∫ø n√†o ƒë·ªÉ ch·ªçn chuy√™n gia ph√π h·ª£p?",
        answer: "H·ªá th·ªëng s·∫Ω g·ª£i √Ω chuy√™n gia ph√π h·ª£p d·ª±a tr√™n v·∫•n ƒë·ªÅ c·ªßa b·∫°n, ho·∫∑c b·∫°n c√≥ th·ªÉ ch·ªçn chuy√™n gia theo h·ªì s∆° v√† ƒë√°nh gi√° t·ª´ ng∆∞·ªùi d√πng kh√°c."
      },
      {
        question: "T√¥i c√≥ th·ªÉ ƒë·∫∑t nhi·ªÅu gi·ªù t∆∞ v·∫•n c√πng l√∫c kh√¥ng?",
        answer: "C√≥, b·∫°n c√≥ th·ªÉ ƒë·∫∑t t·ª´ 1-3 gi·ªù t∆∞ v·∫•n li√™n ti·∫øp trong m·ªôt bu·ªïi, t√πy thu·ªôc v√†o l·ªãch tr·ªëng c·ªßa chuy√™n gia."
      },
      {
        question: "Ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c ch·∫•p nh·∫≠n?",
        answer: "Ch√∫ng t√¥i ch·∫•p nh·∫≠n thanh to√°n qua chuy·ªÉn kho·∫£n ng√¢n h√†ng, v√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay) v√† ti·ªÅn m·∫∑t t·∫°i bu·ªïi t∆∞ v·∫•n."
      }
    ]
  };
  
  // State cho form ƒë·∫∑t l·ªãch (ch·ªâ gi·ªØ l·∫°i c√°c tr∆∞·ªùng c·∫ßn thi·∫øt)
  const [bookingData, setBookingData] = useState({
    city: '',
    address: '',
    date: '',
    time: ''
  });

  const [errors, setErrors] = useState({});
  const [selectedDistricts, setSelectedDistricts] = useState([]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setBookingData({
      ...bookingData,
      [name]: value
    });

    // Khi ch·ªçn th√†nh ph·ªë, c·∫≠p nh·∫≠t danh s√°ch qu·∫≠n/huy·ªán
    if (name === 'city') {
      const selectedCity = vietnamCities.find(city => city.name === value);
      setSelectedDistricts(selectedCity ? selectedCity.districts : []);
      // Reset address khi ƒë·ªïi th√†nh ph·ªë
      setBookingData(prev => ({
        ...prev,
        city: value,
        address: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!bookingData.city) newErrors.city = 'Vui l√≤ng ch·ªçn th√†nh ph·ªë';
    if (!bookingData.address) newErrors.address = 'Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán';
    if (!bookingData.date) newErrors.date = 'Vui l√≤ng ch·ªçn ng√†y';
    if (!bookingData.time) newErrors.time = 'Vui l√≤ng ch·ªçn gi·ªù';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒëi theo ƒë√∫ng format bookingPayload
      const bookingPayload = {
        accountId: getUserInfo(), 
        serviceId: parseInt(id), // L·∫•y serviceId t·ª´ URL params
        address: bookingData.address,
        city: bookingData.city,
        preferredTime: new Date(bookingData.date + 'T' + bookingData.time).toISOString(), // K·∫øt h·ª£p date v√† time th√†nh ISO string
      };

      try {
        const response = await bookingService.createBooking(bookingPayload);
        if (response) {
          console.log('Booking created successfully:', response);
          alert('ƒê·∫∑t l·ªãch t∆∞ v·∫•n th√†nh c√¥ng!');
          // Reset form
          setBookingData({
            city: '',
            address: '',
            date: '',
            time: ''
          });
          setSelectedDistricts([]);
          setShowBookingForm(false);
        } else {
          alert('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i.');
        }
      } catch (error) {
        console.error('Failed to create booking:', error);
        alert('ƒê·∫∑t l·ªãch th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  return (
    <div className="container mx-auto px-4 py-12 max-w-6xl">
      
      {/* Ph·∫ßn m√¥ t·∫£ chi ti·∫øt */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#FF6B6B] mb-6">Gi·ªõi thi·ªáu d·ªãch v·ª•</h2>
        <p className="text-gray-700 leading-relaxed mb-8">{service.longDescription}</p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-sm p-8 border border-[#FFB6C1]/30">
            <h3 className="text-2xl font-semibold text-[#FF6B6B] mb-4">ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t</h3>
            <ul className="space-y-3">
              {service.features.map((feature, index) => (
                <li key={index} className="flex items-center">
                  <span className="text-[#FF6B6B] mr-3">‚úì</span>
                  <span className="text-gray-700">{feature}</span>
                </li>
              ))}
            </ul>
          </div>
          
          <div className="bg-[#FFF5F5] rounded-2xl shadow-sm p-8 border border-[#FFB6C1]/30">
            <h3 className="text-2xl font-semibold text-[#FF6B6B] mb-4">Ai n√™n s·ª≠ d·ª•ng d·ªãch v·ª• n√†y?</h3>
            <ul className="space-y-3">
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi ƒëang g·∫∑p kh√≥ khƒÉn trong c√°c m·ªëi quan h·ªá</span>
              </li>
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi c·∫ßn t∆∞ v·∫•n v·ªÅ v·∫•n ƒë·ªÅ t√¨nh c·∫£m, h√¥n nh√¢n</span>
              </li>
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi mu·ªën c·∫£i thi·ªán k·ªπ nƒÉng giao ti·∫øp, x√¢y d·ª±ng m·ªëi quan h·ªá</span>
              </li>
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi c·∫ßn h·ªó tr·ª£ t√¢m l√Ω trong th·ªùi gian ng·∫Øn v·ªõi chi ph√≠ h·ª£p l√Ω</span>
              </li>
            </ul>
          </div>
        </div>
      </div>
      
      {/* Ph·∫ßn l·ª£i √≠ch */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#FF6B6B] mb-8">L·ª£i √≠ch khi s·ª≠ d·ª•ng d·ªãch v·ª•</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {service.benefits.map((benefit, index) => (
            <div key={index} className="bg-white rounded-xl shadow-sm p-6 border border-[#FFB6C1]/20 hover:shadow-md transition-all duration-300">
              <h3 className="text-xl font-semibold text-[#FF6B6B] mb-2">{benefit.title}</h3>
              <p className="text-gray-700">{benefit.description}</p>
            </div>
          ))}
        </div>
      </div>
      
      {/* Ph·∫ßn quy tr√¨nh */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#FF6B6B] mb-8">Quy tr√¨nh t∆∞ v·∫•n</h2>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {service.process.map((step) => (
            <div key={step.step} className="bg-white rounded-xl shadow-sm p-6 border border-[#FFB6C1]/20 relative">
              <div className="absolute -top-4 -left-4 w-12 h-12 rounded-full bg-[#FF6B6B] flex items-center justify-center text-white font-bold text-xl">
                {step.step}
              </div>
              <h3 className="text-xl font-semibold text-[#FF6B6B] mb-2 mt-2">{step.title}</h3>
              <p className="text-gray-700">{step.description}</p>
            </div>
          ))}
        </div>
      </div>
      
      {/* Ph·∫ßn c√¢u h·ªèi th∆∞·ªùng g·∫∑p */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#FF6B6B] mb-8">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
        <div className="space-y-4">
          {service.faqs.map((faq, index) => (
            <div key={index} className="bg-white rounded-xl shadow-sm p-6 border border-[#FFB6C1]/20">
              <h3 className="text-xl font-semibold text-[#FF6B6B] mb-2">{faq.question}</h3>
              <p className="text-gray-700">{faq.answer}</p>
            </div>
          ))}
        </div>
      </div>
      
      {/* Ph·∫ßn ƒëƒÉng k√Ω t∆∞ v·∫•n */}
      <div className="bg-[#FFF5F5] rounded-3xl p-8 mb-12 text-center">
        <h2 className="text-3xl font-semibold text-[#FF6B6B] mb-4">ƒêƒÉng k√Ω t∆∞ v·∫•n ngay</h2>
        
        <button
          onClick={() => setShowBookingForm(!showBookingForm)}
          className="bg-[#FF6B6B] hover:bg-[#FF5252] text-white font-semibold py-4 px-8 rounded-xl transition-colors duration-300 shadow-md"
        >
          {showBookingForm ? '·∫®n form ƒëƒÉng k√Ω' : 'ƒêƒÉng k√Ω t∆∞ v·∫•n'}
        </button>
      </div>
      
      {/* Form ƒëƒÉng k√Ω t∆∞ v·∫•n */}
      {showBookingForm && (
        <div className="bg-white rounded-2xl shadow-lg p-8 border border-[#FFB6C1]/30 mb-16">
          <h2 className="text-2xl font-semibold text-[#FF6B6B] mb-6">ƒêƒÉng k√Ω bu·ªïi t∆∞ v·∫•n</h2>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Th√†nh ph·ªë */}
              <div>
                <label htmlFor="city" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  Th√†nh ph·ªë
                </label>
                <select
                  id="city"
                  name="city"
                  value={bookingData.city}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border ${errors.city ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                >
                  <option value="">Ch·ªçn th√†nh ph·ªë</option>
                  {vietnamCities.map((city) => (
                    <option key={city.name} value={city.name}>
                      {city.name}
                    </option>
                  ))}
                </select>
                {errors.city && <p className="mt-1 text-sm text-red-600">{errors.city}</p>}
              </div>
              
              {/* Qu·∫≠n/Huy·ªán */}
              <div>
                <label htmlFor="address" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  Qu·∫≠n/Huy·ªán
                </label>
                <select
                  id="address"
                  name="address"
                  value={bookingData.address}
                  onChange={handleChange}
                  disabled={!bookingData.city}
                  className={`w-full px-4 py-2 border ${errors.address ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B] ${!bookingData.city ? 'bg-gray-100 cursor-not-allowed' : ''}`}
                >
                  <option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>
                  {selectedDistricts.map((district) => (
                    <option key={district} value={district}>
                      {district}
                    </option>
                  ))}
                </select>
                {errors.address && <p className="mt-1 text-sm text-red-600">{errors.address}</p>}
              </div>
              
              {/* Ng√†y h·∫πn */}
              <div>
                <label htmlFor="date" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  Ng√†y h·∫πn
                </label>
                <input
                  type="date"
                  id="date"
                  name="date"
                  value={bookingData.date}
                  onChange={handleChange}
                  min={new Date().toISOString().split('T')[0]}
                  className={`w-full px-4 py-2 border ${errors.date ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                />
                {errors.date && <p className="mt-1 text-sm text-red-600">{errors.date}</p>}
              </div>
              
              {/* Gi·ªù h·∫πn */}
              <div>
                <label htmlFor="time" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  Gi·ªù h·∫πn
                </label>
                <select
                  id="time"
                  name="time"
                  value={bookingData.time}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border ${errors.time ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                >
                  <option value="">Ch·ªçn gi·ªù h·∫πn</option>
                  <option value="09:00">09:00</option>
                  <option value="10:00">10:00</option>
                  <option value="11:00">11:00</option>
                  <option value="14:00">14:00</option>
                  <option value="15:00">15:00</option>
                  <option value="16:00">16:00</option>
                  <option value="17:00">17:00</option>
                  <option value="18:00">18:00</option>
                  <option value="19:00">19:00</option>
                </select>
                {errors.time && <p className="mt-1 text-sm text-red-600">{errors.time}</p>}
              </div>
            </div>
            
            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => setShowBookingForm(false)}
                className="px-6 py-3 border border-[#FFB6C1] text-[#FF6B6B] rounded-lg hover:bg-[#FFF5F5] transition-colors duration-300"
              >
                H·ªßy
              </button>
              <button
                type="submit"
                className="px-6 py-3 bg-[#FF6B6B] hover:bg-[#FF5252] text-white rounded-lg transition-colors duration-300 shadow-sm"
              >
                ƒê·∫∑t l·ªãch t∆∞ v·∫•n
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  )
}

export default ServiceDetail