import React, { useState } from 'react'
import { useParams, Link } from 'react-router-dom'

const ServiceDetail = () => {
  const { id } = useParams();
  const [showBookingForm, setShowBookingForm] = useState(false);
  
  // D·ªØ li·ªáu m·∫´u cho d·ªãch v·ª• t∆∞ v·∫•n theo gi·ªù
  const service = {
    id: 7,
    title: "T∆∞ v·∫•n t√¢m l√Ω theo gi·ªù",
    price: 100000,
    duration: 60, // ph√∫t
    description: "D·ªãch v·ª• t∆∞ v·∫•n t√¢m l√Ω tr·ª±c ti·∫øp 1-1 v·ªõi chuy√™n gia t√¢m l√Ω h√†ng ƒë·∫ßu. Gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ t√¢m l√Ω, t√¨nh c·∫£m v·ªõi chi ph√≠ h·ª£p l√Ω v√† linh ho·∫°t theo th·ªùi gian.",
    longDescription: "D·ªãch v·ª• t∆∞ v·∫•n t√¢m l√Ω theo gi·ªù c·ªßa Love Haven cung c·∫•p gi·∫£i ph√°p t∆∞ v·∫•n linh ho·∫°t, ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch c·ªßa b·∫°n. V·ªõi m·ª©c gi√° ch·ªâ 100.000 ƒë·ªìng/gi·ªù, b·∫°n s·∫Ω ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp 1-1 v·ªõi c√°c chuy√™n gia t√¢m l√Ω c√≥ tr√¨nh ƒë·ªô chuy√™n m√¥n cao v√† nhi·ªÅu nƒÉm kinh nghi·ªám. Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn kh√¥ng gian ri√™ng t∆∞, an to√†n ƒë·ªÉ b·∫°n c√≥ th·ªÉ chia s·∫ª m·ªçi v·∫•n ƒë·ªÅ v√† nh·∫≠n ƒë∆∞·ª£c l·ªùi khuy√™n, h∆∞·ªõng d·∫´n ph√π h·ª£p.",
    icon: "üí¨",
    features: [
      "T∆∞ v·∫•n 1-1 v·ªõi chuy√™n gia", 
      "Ch·ªâ 100.000ƒë/gi·ªù", 
      "Linh ho·∫°t th·ªùi gian", 
      "B·∫£o m·∫≠t th√¥ng tin",
      "Kh√¥ng gian ri√™ng t∆∞",
      "ƒê·∫∑t l·ªãch tr·ª±c tuy·∫øn"
    ],
    benefits: [
      {
        title: "Ti·∫øt ki·ªám chi ph√≠",
        description: "Chi ph√≠ h·ª£p l√Ω ch·ªâ 100.000ƒë/gi·ªù, ph√π h·ª£p v·ªõi m·ªçi ƒë·ªëi t∆∞·ª£ng"
      },
      {
        title: "Linh ho·∫°t th·ªùi gian",
        description: "ƒê·∫∑t l·ªãch theo th·ªùi gian ph√π h·ª£p v·ªõi b·∫°n, k·ªÉ c·∫£ bu·ªïi t·ªëi v√† cu·ªëi tu·∫ßn"
      },
      {
        title: "Chuy√™n gia h√†ng ƒë·∫ßu",
        description: "ƒê·ªôi ng≈© chuy√™n gia t√¢m l√Ω ƒë∆∞·ª£c ƒë√†o t·∫°o b√†i b·∫£n, c√≥ ch·ª©ng ch·ªâ h√†nh ngh·ªÅ"
      },
      {
        title: "B·∫£o m·∫≠t tuy·ªát ƒë·ªëi",
        description: "Th√¥ng tin c√° nh√¢n v√† n·ªôi dung t∆∞ v·∫•n ƒë∆∞·ª£c b·∫£o m·∫≠t 100%"
      }
    ],
    process: [
      {
        step: 1,
        title: "ƒêƒÉng k√Ω t∆∞ v·∫•n",
        description: "ƒêi·ªÅn th√¥ng tin v√† ch·ªçn th·ªùi gian ph√π h·ª£p"
      },
      {
        step: 2,
        title: "X√°c nh·∫≠n l·ªãch h·∫πn",
        description: "Nh·∫≠n email x√°c nh·∫≠n v√† h∆∞·ªõng d·∫´n chu·∫©n b·ªã"
      },
      {
        step: 3,
        title: "Tham gia bu·ªïi t∆∞ v·∫•n",
        description: "G·∫∑p g·ª° chuy√™n gia t·∫°i ƒë·ªãa ƒëi·ªÉm ƒë√£ ch·ªçn ho·∫∑c tr·ª±c tuy·∫øn"
      },
      {
        step: 4,
        title: "Nh·∫≠n k·∫øt qu·∫£ t∆∞ v·∫•n",
        description: "Nh·∫≠n b√°o c√°o v√† k·∫ø ho·∫°ch h√†nh ƒë·ªông sau bu·ªïi t∆∞ v·∫•n"
      }
    ],
    faqs: [
      {
        question: "T√¥i c√≥ th·ªÉ h·ªßy ho·∫∑c ƒë·ªïi l·ªãch h·∫πn kh√¥ng?",
        answer: "B·∫°n c√≥ th·ªÉ h·ªßy ho·∫∑c ƒë·ªïi l·ªãch h·∫πn tr∆∞·ªõc 24 gi·ªù m√† kh√¥ng m·∫•t ph√≠. N·∫øu h·ªßy trong v√≤ng 24 gi·ªù, b·∫°n s·∫Ω b·ªã t√≠nh 50% ph√≠ d·ªãch v·ª•."
      },
      {
        question: "L√†m th·∫ø n√†o ƒë·ªÉ ch·ªçn chuy√™n gia ph√π h·ª£p?",
        answer: "H·ªá th·ªëng s·∫Ω g·ª£i √Ω chuy√™n gia ph√π h·ª£p d·ª±a tr√™n v·∫•n ƒë·ªÅ c·ªßa b·∫°n, ho·∫∑c b·∫°n c√≥ th·ªÉ ch·ªçn chuy√™n gia theo h·ªì s∆° v√† ƒë√°nh gi√° t·ª´ ng∆∞·ªùi d√πng kh√°c."
      },
      {
        question: "T√¥i c√≥ th·ªÉ ƒë·∫∑t nhi·ªÅu gi·ªù t∆∞ v·∫•n c√πng l√∫c kh√¥ng?",
        answer: "C√≥, b·∫°n c√≥ th·ªÉ ƒë·∫∑t t·ª´ 1-3 gi·ªù t∆∞ v·∫•n li√™n ti·∫øp trong m·ªôt bu·ªïi, t√πy thu·ªôc v√†o l·ªãch tr·ªëng c·ªßa chuy√™n gia."
      },
      {
        question: "Ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c ch·∫•p nh·∫≠n?",
        answer: "Ch√∫ng t√¥i ch·∫•p nh·∫≠n thanh to√°n qua chuy·ªÉn kho·∫£n ng√¢n h√†ng, v√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay) v√† ti·ªÅn m·∫∑t t·∫°i bu·ªïi t∆∞ v·∫•n."
      }
    ]
  };

  // State cho form ƒë·∫∑t l·ªãch
  const [bookingData, setBookingData] = useState({
    name: '',
    email: '',
    phone: '',
    date: '',
    time: '',
    duration: 1, // S·ªë gi·ªù
    location: '',
    issue: '',
    preferredExpert: ''
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setBookingData({
      ...bookingData,
      [name]: value
    });
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!bookingData.name.trim()) newErrors.name = 'Vui l√≤ng nh·∫≠p h·ªç t√™n';
    if (!bookingData.email.trim()) newErrors.email = 'Vui l√≤ng nh·∫≠p email';
    else if (!/\S+@\S+\.\S+/.test(bookingData.email)) newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    if (!bookingData.phone.trim()) newErrors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    else if (!/^[0-9]{10,11}$/.test(bookingData.phone)) newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    if (!bookingData.date) newErrors.date = 'Vui l√≤ng ch·ªçn ng√†y';
    if (!bookingData.time) newErrors.time = 'Vui l√≤ng ch·ªçn gi·ªù';
    if (!bookingData.location) newErrors.location = 'Vui l√≤ng ch·ªçn ƒë·ªãa ƒëi·ªÉm';
    if (!bookingData.issue.trim()) newErrors.issue = 'Vui l√≤ng m√¥ t·∫£ v·∫•n ƒë·ªÅ c·ªßa b·∫°n';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm()) {
      // T√≠nh t·ªïng ti·ªÅn
      const totalPrice = service.price * bookingData.duration;
      
      // X·ª≠ l√Ω ƒë·∫∑t l·ªãch t∆∞ v·∫•n
      console.log('Booking data:', bookingData);
      console.log('Total price:', totalPrice);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      alert(`ƒê·∫∑t l·ªãch t∆∞ v·∫•n th√†nh c√¥ng! T·ªïng chi ph√≠: ${totalPrice.toLocaleString()}ƒë`);
      
      // Reset form
      setBookingData({
        name: '',
        email: '',
        phone: '',
        date: '',
        time: '',
        duration: 1,
        location: '',
        issue: '',
        preferredExpert: ''
      });
      
      // ·∫®n form
      setShowBookingForm(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-12 max-w-6xl">
      
      {/* <div className="bg-[#] rounded-3xl p-8 mb-12 text-center">
        <div className="text-5xl mb-6 text-[#FF6B6B]">{service.icon}</div>
        <h1 className="text-4xl font-bold text-[#FF6B6B] mb-4">{service.title}</h1>
        <p className="text-xl text-gray-700 max-w-3xl mx-auto">{service.description}</p>
        <div className="mt-8 inline-block bg-white px-6 py-3 rounded-xl shadow-sm">
          <span className="text-2xl font-bold text-[#FF6B6B]">{service.price.toLocaleString()}ƒë</span>
          <span className="text-gray-600"> / {service.duration} ph√∫t</span>
        </div>
      </div> */}
      
      {/* Ph·∫ßn m√¥ t·∫£ chi ti·∫øt */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#] mb-6">Gi·ªõi thi·ªáu d·ªãch v·ª•</h2>
        <p className="text-gray-700 leading-relaxed mb-8">{service.longDescription}</p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-sm p-8 border border-[#FFB6C1]/30">
            <h3 className="text-2xl font-semibold text-[#FF6B6B] mb-4">ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t</h3>
            <ul className="space-y-3">
              {service.features.map((feature, index) => (
                <li key={index} className="flex items-center">
                  <span className="text-[#FF6B6B] mr-3">‚úì</span>
                  <span className="text-gray-700">{feature}</span>
                </li>
              ))}
            </ul>
          </div>
          
          <div className="bg-[#FFF5F5] rounded-2xl shadow-sm p-8 border border-[#FFB6C1]/30">
            <h3 className="text-2xl font-semibold text-[#FF6B6B] mb-4">Ai n√™n s·ª≠ d·ª•ng d·ªãch v·ª• n√†y?</h3>
            <ul className="space-y-3">
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi ƒëang g·∫∑p kh√≥ khƒÉn trong c√°c m·ªëi quan h·ªá</span>
              </li>
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi c·∫ßn t∆∞ v·∫•n v·ªÅ v·∫•n ƒë·ªÅ t√¨nh c·∫£m, h√¥n nh√¢n</span>
              </li>
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi mu·ªën c·∫£i thi·ªán k·ªπ nƒÉng giao ti·∫øp, x√¢y d·ª±ng m·ªëi quan h·ªá</span>
              </li>
              <li className="flex items-start">
                <span className="text-[#FF6B6B] mr-3 mt-1">‚Ä¢</span>
                <span className="text-gray-700">Ng∆∞·ªùi c·∫ßn h·ªó tr·ª£ t√¢m l√Ω trong th·ªùi gian ng·∫Øn v·ªõi chi ph√≠ h·ª£p l√Ω</span>
              </li>
            </ul>
          </div>
        </div>
      </div>
      
      {/* Ph·∫ßn l·ª£i √≠ch */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#] mb-8">L·ª£i √≠ch khi s·ª≠ d·ª•ng d·ªãch v·ª•</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {service.benefits.map((benefit, index) => (
            <div key={index} className="bg-white rounded-xl shadow-sm p-6 border border-[#FFB6C1]/20 hover:shadow-md transition-all duration-300">
              <h3 className="text-xl font-semibold text-[#FF6B6B] mb-2">{benefit.title}</h3>
              <p className="text-gray-700">{benefit.description}</p>
            </div>
          ))}
        </div>
      </div>
      
      {/* Ph·∫ßn quy tr√¨nh */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#] mb-8">Quy tr√¨nh t∆∞ v·∫•n</h2>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {service.process.map((step) => (
            <div key={step.step} className="bg-white rounded-xl shadow-sm p-6 border border-[#FFB6C1]/20 relative">
              <div className="absolute -top-4 -left-4 w-12 h-12 rounded-full bg-[#FF6B6B] flex items-center justify-center text-white font-bold text-xl">
                {step.step}
              </div>
              <h3 className="text-xl font-semibold text-[#FF6B6B] mb-2 mt-2">{step.title}</h3>
              <p className="text-gray-700">{step.description}</p>
            </div>
          ))}
        </div>
      </div>
      
      {/* Ph·∫ßn c√¢u h·ªèi th∆∞·ªùng g·∫∑p */}
      <div className="mb-16">
        <h2 className="text-3xl font-semibold text-[#FF6B6B] mb-8">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
        <div className="space-y-4">
          {service.faqs.map((faq, index) => (
            <div key={index} className="bg-white rounded-xl shadow-sm p-6 border border-[#FFB6C1]/20">
              <h3 className="text-xl font-semibold text-[#FF6B6B] mb-2">{faq.question}</h3>
              <p className="text-gray-700">{faq.answer}</p>
            </div>
          ))}
        </div>
      </div>
      
      {/* Ph·∫ßn ƒëƒÉng k√Ω t∆∞ v·∫•n */}
      <div className="bg-[#] rounded-3xl p-8 mb-12 text-center">
        <h2 className="text-3xl font-semibold text-[#] mb-4">ƒêƒÉng k√Ω t∆∞ v·∫•n ngay</h2>
        
        <button
          onClick={() => setShowBookingForm(!showBookingForm)}
          className="bg-[#FF6B6B] hover:bg-[#FF5252] text-white font-semibold py-4 px-8 rounded-xl transition-colors duration-300 shadow-md"
        >
          {showBookingForm ? '·∫®n form ƒëƒÉng k√Ω' : 'ƒêƒÉng k√Ω t∆∞ v·∫•n'}
        </button>
      </div>
      
      {/* Form ƒëƒÉng k√Ω t∆∞ v·∫•n */}
      {showBookingForm && (
        <div className="bg-white rounded-2xl shadow-lg p-8 border border-[#FFB6C1]/30 mb-16">
          <h2 className="text-2xl font-semibold text-[#FF6B6B] mb-6">ƒêƒÉng k√Ω bu·ªïi t∆∞ v·∫•n</h2>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Th√¥ng tin c√° nh√¢n */}
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  H·ªç v√† t√™n
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={bookingData.name}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border ${errors.name ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                />
                {errors.name && <p className="mt-1 text-sm text-red-600">{errors.name}</p>}
              </div>
              
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={bookingData.email}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border ${errors.email ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                />
                {errors.email && <p className="mt-1 text-sm text-red-600">{errors.email}</p>}
              </div>
              
              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  S·ªë ƒëi·ªán tho·∫°i
                </label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={bookingData.phone}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border ${errors.phone ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                />
                {errors.phone && <p className="mt-1 text-sm text-red-600">{errors.phone}</p>}
              </div>
              
              {/* Th√¥ng tin l·ªãch h·∫πn */}
              <div>
                <label htmlFor="date" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  Ng√†y h·∫πn
                </label>
                <input
                  type="date"
                  id="date"
                  name="date"
                  value={bookingData.date}
                  onChange={handleChange}
                  min={new Date().toISOString().split('T')[0]}
                  className={`w-full px-4 py-2 border ${errors.date ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                />
                {errors.date && <p className="mt-1 text-sm text-red-600">{errors.date}</p>}
              </div>
              
              <div>
                <label htmlFor="time" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  Gi·ªù h·∫πn
                </label>
                <select
                  id="time"
                  name="time"
                  value={bookingData.time}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border ${errors.time ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                >
                  <option value="">Ch·ªçn gi·ªù h·∫πn</option>
                  <option value="09:00">09:00</option>
                  <option value="10:00">10:00</option>
                  <option value="11:00">11:00</option>
                  <option value="14:00">14:00</option>
                  <option value="15:00">15:00</option>
                  <option value="16:00">16:00</option>
                  <option value="17:00">17:00</option>
                  <option value="18:00">18:00</option>
                  <option value="19:00">19:00</option>
                </select>
                {errors.time && <p className="mt-1 text-sm text-red-600">{errors.time}</p>}
              </div>
              
             
              
              <div>
                <label htmlFor="location" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                  H√¨nh th·ª©c t∆∞ v·∫•n
                </label>
                <select
                  id="location"
                  name="location"
                  value={bookingData.location}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border ${errors.location ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                >
                  <option value="">Ch·ªçn h√¨nh th·ª©c t∆∞ v·∫•n</option>
                  <option value="online">Tr·ª±c tuy·∫øn (Zoom/Google Meet)</option>
                  <option value="office">T·∫°i vƒÉn ph√≤ng Love Haven</option>
                  <option value="home">T·∫°i nh√† (ph√≠ di chuy·ªÉn th√™m 50.000ƒë)</option>
                </select>
                {errors.location && <p className="mt-1 text-sm text-red-600">{errors.location}</p>}
              </div>
              
              
            </div>
            
            <div>
              <label htmlFor="issue" className="block text-sm font-medium text-[#FF6B6B] mb-1">
                M√¥ t·∫£ v·∫•n ƒë·ªÅ c·ªßa b·∫°n
              </label>
              <textarea
                id="issue"
                name="issue"
                rows="4"
                value={bookingData.issue}
                onChange={handleChange}
                className={`w-full px-4 py-2 border ${errors.issue ? 'border-red-300' : 'border-[#FFB6C1]'} rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF6B6B]`}
                placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i ƒë·ªÉ ch√∫ng t√¥i chu·∫©n b·ªã t·ªët nh·∫•t cho bu·ªïi t∆∞ v·∫•n..."
              ></textarea>
              {errors.issue && <p className="mt-1 text-sm text-red-600">{errors.issue}</p>}
            </div>
            
            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => setShowBookingForm(false)}
                className="px-6 py-3 border border-[#FFB6C1] text-[#FF6B6B] rounded-lg hover:bg-[#FFF5F5] transition-colors duration-300"
              >
                H·ªßy
              </button>
              <button
                type="submit"
                className="px-6 py-3 bg-[#FF6B6B] hover:bg-[#FF5252] text-white rounded-lg transition-colors duration-300 shadow-sm"
              >
                ƒê·∫∑t l·ªãch t∆∞ v·∫•n
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  )
}

export default ServiceDetail